/**
 * NAME: SCRYPTA DECENTRALIZED NAMES
 * DESCRIPTION: THIS CONTRACT WILL MAINTAIN A LIST OF NAMES (WHATEVER) ASSOCIATED TO ONE UNIQUE ADDRESS
 * AUTHOR: TURINGLABS
 * VERSION: 1.2.8
 * IMMUTABLE: false
 */

// DEFINING COMPILER VERSION
/* Scrypta v0.0.1 */

async function constructor() {
    
}

function public: check(request) {
    return new Promise(async response => {
        if (request !== undefined && request.name !== undefined) {
            let searcher = request.name.toLowerCase()
            searcher = searcher.replace(/[^\w\s]/gi, "")
            let array = await names()
            let found = false
            let record
            for(let k in array){
              if(array[k].name === searcher){
                found = true
                record = array[k]
              }
            }
            if(found){
                response({ message: "Name already taken.", available: false, record: record })
            }else{
                response({ message: "Name available.", available: true})
            }
        } else {
            response('Please requests for a name first')
        }
    })
}

async function private: searchdata(data){
    if(Object.keys(data).length > 0){
        let keys = Object.keys(data)
        for(let k in Object.keys(data)){
            console.log('ANALYZING DATA FOR ' + keys[k])
            for(let j in data[keys[k]]){
                let written = data[keys[k]][j]
                if(written.protocol === 'names://'){
                    let data = written.data.split(':')
                    let action = data[0]
                    if(action === 'register' && data[1] !== undefined){
                        let name = data[1]
                        name = name.toLowerCase()
                        name = name.replace(/[^\w\s]/gi, "")
                        let cc = await check({name: name})   
                        if(cc.available === true){
                            let obj = {
                                name: name,
                                owner: written.address,
                                uuid: written.uuid,
                                payment: null,
                                price: null
                            }
                            await db.insert(obj)
                        } else {
                            console.log('IGNORING, NAME ALREADY TAKEN')
                        }
                    }else if(action === 'transfer' && data[2] !== undefined){
                        let uuid = data[1]
                        let check = await db.read({uuid: uuid})
                        let transferTo = data[2]
                        if(check.owner !== undefined){
                            if(check.owner === written.address){
                                await db.update({uuid: uuid}, { $set: { owner: transferTo, payment: null, price: null } })
                            }else{
                                console.log('CAN\'T TRANSFER, NOT THE OWNER')
                            }
                        }else{
                            console.log('NAME NEVER REGISTERED')
                        }
                    }else if(action === 'sell' && data[2] !== undefined && data[3] !== undefined){
                        let uuid = data[1]
                        let check = await db.read({uuid: uuid})
                        let payment = data[2]
                        let price = data[3]
                        if(check.owner !== undefined){
                            if(check.owner === written.address && check.payment === null && check.price === null){
                                await db.update({uuid: uuid}, { $set: { payment: payment, price: price } })
                            }else{
                                console.log('CAN\'T SELL, NOT THE OWNER OR SELL PLACED YET')
                            }
                        }else{
                            console.log('NAME NEVER REGISTERED')
                        }
                    }else if(action === 'update' && data[2] !== undefined && data[3] !== undefined){
                        let uuid = data[1]
                        let check = await db.read({uuid: uuid})
                        let field = data[2]
                        let value = data[3]
                        if(check.owner !== undefined){
                            if(check.owner === written.address){
                                if(field === 'icon'){
                                  await db.update({uuid: uuid}, { $set: { icon: value } })
                                }else if(field === 'description'){
                                  await db.update({uuid: uuid}, { $set: { description: value } })
                                }else if(field === 'ip'){
                                  await db.update({uuid: uuid}, { $set: { ip: value } })
                                }else if(field === 'bitcoin'){
                                  await db.update({uuid: uuid}, { $set: { bitcoin: value } })
                                }else if(field === 'ethereum'){
                                  await db.update({uuid: uuid}, { $set: { ethereum: value } })
                                }else if(field === 'link'){
                                  await db.update({uuid: uuid}, { $set: { link: value } })
                                }else if(field === 'youtube'){
                                  await db.update({uuid: uuid}, { $set: { youtube: value } })
                                }
                            }else{
                                console.log('CAN\'T UPDATE, NOT THE OWNER')
                            }
                        }else{
                            console.log('NAME NEVER REGISTERED')
                        }
                    }else if(action === 'remove'){
                        let uuid = data[1]
                        let check = await db.read({uuid: uuid})
                        if(check.owner !== undefined){
                            if(check.owner === written.address){
                                await db.update({uuid: uuid}, { $set: { payment: null, price: null } })
                            }else{
                                console.log('CAN\'T REMOVE, CONDITIONS NOT SATISFIED')
                            }
                        }else{
                            console.log('NAME NEVER REGISTERED')
                        }
                    }
                }
            }
        }
    }
}

async function private: searchbuy(data){
    if(Object.keys(data).length > 0){
        let keys = Object.keys(data)
        for(let k in Object.keys(data)){
            console.log('ANALYZING DATA FOR ' + keys[k])
            for(let j in data[keys[k]]){
                let received = data[keys[k]][j]
                if(received.data.indexOf('names://') === 0){
                    let data = received.data.replace('names://','').split(':')
                    let action = data[0]
                    let uuid = data[1]
                    if(action === 'buy'){
                        let check = await db.read({uuid: uuid})
                        if(check.payment === keys[k]){
                          let balance = await scrypta.get('/balance/' + keys[k])
                          if(balance.balance > 0 && balance.balance >= check.price){
                            await db.update({uuid: uuid}, { $set: { owner: received.sender, payment: null, price: null } })
                          } else {
                            console.log('REQUIRED BALANCE IS HIGHER')
                          }
                        }else{
                          console.log('PAYMENT ADDRESS NOT VALIDATED')
                        }
                    }
                }
            }
        }
    }
}

function public: names(){
    return new Promise(async response => {
        let array = await db.read()
        if(array.name !== undefined){
          array = [array]
        }
        let ban = ["register:turinglabs"]
        let parsed = []
        for(let k in array){
          if(ban.indexOf(array[k].name) === -1){
            let name = array[k].name.toLowerCase()
            name = name.replace(/[^\w\s]/gi, "")
            array[k].name = name
            parsed.push(array[k])
          }
        }
        response(parsed)
    })
}

function public: search(request) {
    return new Promise(async response => {
        if (request !== undefined && request.name !== undefined) {
            let searcher = request.name.toLowerCase()
            searcher = searcher.replace(/[^\w\s]/gi, "")
            let array = await names()
            let found = false
            let record
            for(let k in array){
              if(array[k].name === searcher){
                found = true
                record = names[k]
              }
            }
            if(found){
                response({ address: record.owner, error: false })
            }else{
                response({ message: "Name not found.", error: true })
            }
        } else if (request !== undefined && request.address !== undefined) {
            let names = await names()
            let found = []
            for(let k in names){
              if(names[k].owner === request.address){
                found.push(names[k])
              }
            }
            if(found.length > 0){
                response({ names: check, error: false })
            }else{
                response({ message: "Address not found.", error: true})
            }
        } else {
            response('Please request for a name first')
        }
    })
}


async function public: eachBlock(block){
    return await searchdata(block['data_written'])
    searchbuy(block['data_received'])
}

async function public: ifMempool(mempool){
    searchdata(mempool['data_written'])
    searchbuy(mempool['data_received'])
}